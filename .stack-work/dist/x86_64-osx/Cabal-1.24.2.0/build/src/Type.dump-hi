
==================== FINAL INTERFACE ====================
2017-07-20 02:43:15.784853 UTC

interface language-elm-0.1.0.0-LoDDWDjv62NLP5L4M207ke:Type 8002
  interface hash: 2bb82386de1a0b7ca996b8e4fcb80f5b
  ABI hash: 6e5440ecd8a87b6afd8860e356c0251c
  export-list hash: 1280df056e4a759716b6778941fcca68
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f6624f22fcdd76ed0ac6625466e2d712
  sig of: Nothing
  used TH splices: False
  where
exports:
  Type.toDocT
  Type.tvar
  Type.vopParam
  Type.vopTApp
  Type.TypeDec{Type.Params Type.TApp Type.TTuple2}
module dependencies: Expression
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  Expression dee347134d2f91ad904ea1079941fba0
  exports: a76f1bb57ddecfa38bdc7225492a632b
import  -/  pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint abe8aeb00d775221281f89090d9fbe2a
import  -/  pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ 0c3d66734497c26d70ab123829dd1cb4
f22735683b8638cbb24ff8da64ae21ee
  $tc'Params :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13585738962417144019##
                   706521521107867355##
                   Type.$trModule
                   Type.$tc'Params1) -}
f505c67b16effe1a4be8901db6796ff0
  $tc'Params1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Params"#) -}
177d924d057049bc78bfd1cd98b0a2b3
  $tc'TApp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16970769215596018215##
                   8945746481156883395##
                   Type.$trModule
                   Type.$tc'TApp1) -}
ab3680d82d8ef5f7d72d34a9a96bc4bd
  $tc'TApp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TApp"#) -}
02e05784a66e1e4e337cab315e3c3a36
  $tc'TTuple1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TTuple2"#) -}
1f0e586eed84a2876ee0736197c8adb8
  $tc'TTuple2 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14368253865665189640##
                   11689151582105290076##
                   Type.$trModule
                   Type.$tc'TTuple1) -}
d3be70906bba8080af2a6e74644bd6a4
  $tcTypeDec :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17506858494437745631##
                   16451606111498110890##
                   Type.$trModule
                   Type.$tcTypeDec1) -}
de9809dc02d0d0d458a886e4f695543e
  $tcTypeDec1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TypeDec"#) -}
2a9b6c4ad33a9aa25014eb5f53eba432
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Type.$trModule2 Type.$trModule1) -}
32d0615f27fe72a3ccd2d315d14d315d
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Type"#) -}
71bcd610b4b0666567f9bf14acd3e586
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "language-elm-0.1.0.0-LoDDWDjv62NLP5L4M207ke"#) -}
7923f3ef5743e544bc2c4bafd8fde67f
  data TypeDec
    = Params GHC.Base.String [Type.TypeDec]
    | TApp [Type.TypeDec]
    | TTuple2 Type.TypeDec Type.TypeDec
3e9a1df6d4f6331caf13232fef78c1ea
  toDocT :: Type.TypeDec -> Text.PrettyPrint.HughesPJ.Doc
  {- Arity: 1, Strictness: <S,1*U> -}
4c2bf4f96cb37a4d4f23df3689fb303a
  tvar :: GHC.Base.String -> Type.TypeDec
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m1,
     Unfolding: InlineRule (1, True, False)
                (\ (str :: GHC.Base.String) ->
                 Type.Params str (GHC.Types.[] @ Type.TypeDec)) -}
80f03fdf843e232bbc91961dee79db5a
  vopParam :: Type.TypeDec -> Text.PrettyPrint.HughesPJ.Doc
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (t :: Type.TypeDec) ->
                 case t of wild {
                   DEFAULT
                   -> case (Type.toDocT wild)
                             `cast`
                           (Text.PrettyPrint.HughesPJ.N:Doc[0]) of wild1 {
                        DEFAULT
                        -> (Text.PrettyPrint.Annotated.HughesPJ.Beside
                              @ ()
                              (Text.PrettyPrint.Annotated.HughesPJ.Beside
                                 @ ()
                                 Text.PrettyPrint.HughesPJ.lparen1
                                 GHC.Types.False
                                 wild1)
                              GHC.Types.False
                              Text.PrettyPrint.HughesPJ.parens1)
                             `cast`
                           (Sym (Text.PrettyPrint.HughesPJ.N:Doc[0]))
                        Text.PrettyPrint.Annotated.HughesPJ.Empty
                        -> Type.vopParam1
                             `cast`
                           (Sym (Text.PrettyPrint.HughesPJ.N:Doc[0])) }
                   Type.Params str ds
                   -> case ds of wild1 {
                        []
                        -> (Text.PrettyPrint.Annotated.HughesPJ.text @ () str)
                             `cast`
                           (Sym (Text.PrettyPrint.HughesPJ.N:Doc[0]))
                        : ipv ipv1
                        -> case (Type.toDocT wild)
                                  `cast`
                                (Text.PrettyPrint.HughesPJ.N:Doc[0]) of wild2 {
                             DEFAULT
                             -> (Text.PrettyPrint.Annotated.HughesPJ.Beside
                                   @ ()
                                   (Text.PrettyPrint.Annotated.HughesPJ.Beside
                                      @ ()
                                      Text.PrettyPrint.HughesPJ.lparen1
                                      GHC.Types.False
                                      wild2)
                                   GHC.Types.False
                                   Text.PrettyPrint.HughesPJ.parens1)
                                  `cast`
                                (Sym (Text.PrettyPrint.HughesPJ.N:Doc[0]))
                             Text.PrettyPrint.Annotated.HughesPJ.Empty
                             -> Type.vopParam1
                                  `cast`
                                (Sym (Text.PrettyPrint.HughesPJ.N:Doc[0])) } } }) -}
3246f24c61daf653bbd5a3006d32e773
  vopParam1 :: Text.PrettyPrint.Annotated.HughesPJ.Doc ()
  {- HasNoCafRefs,
     Unfolding: (Text.PrettyPrint.Annotated.HughesPJ.Beside
                   @ ()
                   Text.PrettyPrint.HughesPJ.lparen1
                   GHC.Types.False
                   Text.PrettyPrint.HughesPJ.parens1) -}
470e2206ad0496f69c9bf9d704c98f88
  vopTApp :: Type.TypeDec -> Text.PrettyPrint.HughesPJ.Doc
  {- Arity: 1, Strictness: <S,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

